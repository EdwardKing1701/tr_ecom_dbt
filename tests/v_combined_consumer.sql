WITH f_orders_lines_combined AS (
  SELECT
    CUS_ORD_ID AS TRANSACTION_ID,
    CUS_ORD_LN_ID AS LINE_NO,
    COALESCE(F_CO_DSC_AMT_LCL, 0) + COALESCE(F_CO_UNIT_CST_LCL, 0) AS ITEM_GROSS_PRICE,
    F_CO_ORD_QTY AS ITEM_QTY,
    F_CO_TAX_AMT_LCL AS ITEM_TAX,
    F_CO_UNIT_CST_LCL AS ITEM_NET_PRICE,
    ITM_ID AS PRODUCT_ID,
    F_CO_DSC_AMT_LCL AS DISCOUNT_TOTAL,
    RCD_INS_TS,
    RCD_UPD_TS
  FROM ROBLING_PRD_SFTP_LND_DB.DW_DWH_V.V_DWH_F_CUS_ORD_LN_B
  UNION
  SELECT
    *
  FROM ROBLING_PRD_SFTP_LND_DB.DW_DWH_V.V_DWH_F_ORDER_LINES
), A AS (
  SELECT
    CUS_ORD_ID,
    CUS_ID,
    COALESCE(CUS_ID, TO_CHAR(RANDOM(1))) AS CUS_ID_SALTED,
    ORD_CREATED_DT,
    TR_ORDERTYPE,
    TR_TOTALNETPRICE,
    TR_ISYOTPOLOYALTYUSER,
    F_CO_TAX_AMT_LCL,
    RCD_INS_TS,
    RCD_UPD_TS
  FROM ROBLING_PRD_SFTP_LND_DB.DW_DWH_V.V_DWH_F_CUS_ORD_HDR_B
), B AS (
  SELECT
    TRANSACTION_ID,
    CUSTOMER_ID,
    COALESCE(CUSTOMER_ID, TO_CHAR(RANDOM(2))) AS CUSTOMER_ID_SALTED,
    TRANSACTION_DATE,
    ORDER_CHANNEL,
    ORDER_NET_TOTAL,
    ORDER_TOTAL_TAX,
    RCD_INS_TS,
    RCD_UPD_TS
  FROM ROBLING_PRD_SFTP_LND_DB.DW_DWH_V.V_DWH_F_ORDERS
), Z AS (
  SELECT
    EMAIL,
    MAX(CREATED_AT) AS LATEST_TIER_DATE,
    MIN(CREATED_AT) AS FIRST_TIER_DATE
  FROM ROBLING_PRD_SFTP_LND_DB.DW_DWH_V.V_DWH_F_YOTPO_HISTORY_ITEMS
  WHERE
    ACTION LIKE '%Earned Tier%'
  GROUP BY
    1
), cte AS (
  SELECT
    Y.EMAIL,
    Z.FIRST_TIER_DATE AS JOIN_DATE,
    CASE
      WHEN RIGHT(Y.ACTION, LENGTH(Y.ACTION) - 12) = 'Opening Act'
      THEN 'Insider'
      WHEN RIGHT(Y.ACTION, LENGTH(Y.ACTION) - 12) = 'Headliner'
      THEN 'Trendsetter'
      ELSE RIGHT(Y.ACTION, LENGTH(Y.ACTION) - 12)
    END AS LOYALTY_TIER,
    CASE
      WHEN RIGHT(Y.ACTION, LENGTH(Y.ACTION) - 12) = 'Opening Act'
      OR RIGHT(Y.ACTION, LENGTH(Y.ACTION) - 12) = 'Insider'
      THEN 1
      WHEN RIGHT(Y.ACTION, LENGTH(Y.ACTION) - 12) = 'Headliner'
      OR RIGHT(Y.ACTION, LENGTH(Y.ACTION) - 12) = 'Trendsetter'
      THEN 2
      WHEN RIGHT(Y.ACTION, LENGTH(Y.ACTION) - 12) = 'Icon'
      THEN 3
      ELSE 0
    END AS LOYALTY_RANK
  FROM ROBLING_PRD_SFTP_LND_DB.DW_DWH_V.V_DWH_F_YOTPO_HISTORY_ITEMS AS Y
  INNER JOIN Z AS Z
    ON Y.EMAIL = Z.EMAIL AND Y.CREATED_AT = Z.LATEST_TIER_DATE
  WHERE
    Y.ACTION LIKE '%Earned Tier%'
), D AS (
  SELECT
    EMAIL,
    LOYALTY_TIER,
    JOIN_DATE,
    ROW_NUMBER() OVER (PARTITION BY EMAIL ORDER BY LOYALTY_RANK DESC NULLS LAST) AS ROW_NUMBER
  FROM cte AS cte
), D_A AS (
  SELECT
    EMAIL,
    LOYALTY_TIER,
    JOIN_DATE
  FROM D AS D
  WHERE
    ROW_NUMBER = 1
), C AS (
  SELECT DISTINCT
    EMAIL_ADDRESS,
    SFCC_CUSTOMER_ID,
    COALESCE(EMAIL_ADDRESS, TO_CHAR(RANDOM(3))) AS EMAIL_ADDRESS_SALTED,
    COALESCE(SFCC_CUSTOMER_ID, TO_CHAR(RANDOM(4))) AS SFCC_CUSTOMER_ID_SALTED,
    LOYALTY_TIER,
    CASE
      WHEN MAX(CASE WHEN IS_LOYALTY_MEMBER = 'true' THEN 1 ELSE 0 END) = 1
      THEN 'true'
      ELSE 'false'
    END AS IS_LOYALTY_MEMBER, /* CAST(D_A.JOIN_DATE as DATE) AS LOYALTY_OPTIN_DT, --use this instead of line 86 once yotpo data is fixed, and update the 'group by' on 90 */
    MAX(LOYALTY_OPTIN_STORE_NO) AS LOYALTY_OPTIN_STORE_NO,
    MAX(LOYALTY_OPTOUT_DT) AS LOYALTY_OPTOUT_DT,
    MIN(LOYALTY_OPTIN_DT) AS LOYALTY_OPTIN_DT /* remove this once yotpo data is fixed to use first tier earn as the opt-in date */
  FROM ROBLING_PRD_SFTP_LND_DB.DW_DWH_V.V_DWH_F_CUSTOMERS AS CUST
  LEFT JOIN D_A AS D_A
    ON CUST.EMAIL_ADDRESS = D_A.EMAIL
  GROUP BY ALL
), RT AS (
  SELECT DISTINCT
    TRIM(ORDER_IDS, '["]') AS ORDER_ID,
    '1' AS LOYALTY_REDEMPTION_FLAG
  FROM ROBLING_PRD_SFTP_LND_DB.DW_DWH_V.V_DWH_F_YOTPO_HISTORY_ITEMS
  WHERE
    ACTION LIKE '%Reward%'
), UPT AS (
  SELECT
    TRANSACTION_ID,
    SUM(ITEM_QTY) AS ORDER_ITEM_QTY
  FROM f_orders_lines_combined
  GROUP BY
    1
), COMBINED AS (
  SELECT
    A.CUS_ORD_ID AS TRANSACTION_ID,
    A.CUS_ID AS SFCC_CUSTOMER_ID,
    C.EMAIL_ADDRESS AS CUSTOMER_ID,
    A.ORD_CREATED_DT AS TRANSACTION_DATE,
    A.TR_ORDERTYPE AS ORDER_CHANNEL,
    CASE
      WHEN A.TR_ORDERTYPE = 'App'
      THEN 'E-Comm: App'
      WHEN A.TR_ORDERTYPE LIKE '%Instore%'
      THEN 'Retail'
      ELSE 'E-Comm: Site'
    END AS ORDER_CHANNEL_AGG,
    A.TR_TOTALNETPRICE AS ORDER_NET_TOTAL,
    A.F_CO_TAX_AMT_LCL AS ORDER_TOTAL_TAX,
    C.IS_LOYALTY_MEMBER,
    CASE WHEN LOWER(A.TR_ISYOTPOLOYALTYUSER) = 'true' THEN 'true' ELSE 'false' END AS IS_LOYALTY_TRANSACTION, /* CASE WHEN C.IS_LOYALTY_MEMBER = 'true' AND CAST(C.LOYALTY_OPTIN_DT as DATE) <= CAST(A.ORD_CREATED_DT as DATE) THEN 'true' */ /*  ELSE 'false' END as IS_LOYALTY_TRANSACTION, */
    C.LOYALTY_OPTIN_STORE_NO,
    C.LOYALTY_OPTIN_DT,
    C.LOYALTY_OPTOUT_DT,
    CASE WHEN C.IS_LOYALTY_MEMBER = 'true' THEN C.LOYALTY_TIER ELSE NULL END AS LOYALTY_TIER,
    A.RCD_INS_TS,
    A.RCD_UPD_TS
  FROM A AS A
  LEFT JOIN C AS C
    ON A.CUS_ID = C.SFCC_CUSTOMER_ID
  UNION
  SELECT
    B.TRANSACTION_ID,
    C.SFCC_CUSTOMER_ID AS SFCC_CUSTOMER_ID,
    B.CUSTOMER_ID,
    B.TRANSACTION_DATE,
    B.ORDER_CHANNEL,
    'Retail' AS ORDER_CHANNEL_AGG,
    B.ORDER_NET_TOTAL,
    B.ORDER_TOTAL_TAX,
    C.IS_LOYALTY_MEMBER,
    CASE
      WHEN CAST(C.LOYALTY_OPTIN_DT AS DATE) <= CAST(B.TRANSACTION_DATE AS DATE)
      AND COALESCE(CAST(C.LOYALTY_OPTOUT_DT AS DATE), CURRENT_DATE) >= CAST(B.TRANSACTION_DATE AS DATE)
      THEN 'true'
      ELSE 'false'
    END AS IS_LOYALTY_TRANSACTION,
    C.LOYALTY_OPTIN_STORE_NO,
    C.LOYALTY_OPTIN_DT,
    C.LOYALTY_OPTOUT_DT,
    CASE WHEN C.IS_LOYALTY_MEMBER = 'true' THEN C.LOYALTY_TIER ELSE NULL END AS LOYALTY_TIER,
    B.RCD_INS_TS,
    B.RCD_UPD_TS
  FROM B AS B
  LEFT JOIN C AS C
    ON B.CUSTOMER_ID = C.EMAIL_ADDRESS
), f_orders_combined AS (
  SELECT
    COMBINED.TRANSACTION_ID,
    SFCC_CUSTOMER_ID,
    CUSTOMER_ID,
    TRANSACTION_DATE,
    MIN(TRANSACTION_DATE) OVER (PARTITION BY CUSTOMER_ID) AS FIRST_TRANSACTION_DATE,
    MAX(TRANSACTION_DATE) OVER (PARTITION BY CUSTOMER_ID) AS LATEST_TRANSACTION_DATE,
          CASE
      WHEN (
        MIN(TRANSACTION_DATE) OVER (PARTITION BY CUSTOMER_ID) = TRANSACTION_DATE
      )
      THEN 'NEW'
     WHEN (
        MIN(TRANSACTION_DATE) OVER (PARTITION BY CUSTOMER_ID) < TRANSACTION_DATE
      )
      Then 'RETURNING'
      else 'UNKNOWN'
    TRANSACTION_DATE AS TDATE,
    ORDER_CHANNEL,
    ORDER_CHANNEL_AGG,
    ORDER_NET_TOTAL,
    ORDER_TOTAL_TAX,
    ORDER_ITEM_QTY,
    IS_LOYALTY_MEMBER,
    IS_LOYALTY_TRANSACTION,
    LOYALTY_OPTIN_STORE_NO,
    LOYALTY_OPTIN_DT,
    LOYALTY_OPTOUT_DT,
    CASE WHEN IS_LOYALTY_TRANSACTION = 'true' THEN ORDER_NET_TOTAL ELSE NULL END AS LOYALTY_NET_TOTAL,
    CASE
      WHEN NOT IS_LOYALTY_MEMBER IS NULL AND LOYALTY_TIER IS NULL
      THEN 'Insider'
      ELSE LOYALTY_TIER
    END AS LOYALTY_TIER,
    LOYALTY_REDEMPTION_FLAG,
    CASE WHEN LOYALTY_REDEMPTION_FLAG = 1 THEN ORDER_NET_TOTAL ELSE NULL END AS REDEMPTION_NET_TOTAL,
    CASE WHEN LOYALTY_REDEMPTION_FLAG = 1 THEN ORDER_NET_TOTAL ELSE RT.ORDER_ID END AS REDEMPTION_TRANSACTION_ID,
    RCD_INS_TS,
    RCD_UPD_TS
  FROM COMBINED AS COMBINED
  LEFT JOIN RT AS RT
    ON COMBINED.TRANSACTION_ID = RT.ORDER_ID
  LEFT JOIN UPT AS UPT
    ON COMBINED.TRANSACTION_ID = UPT.TRANSACTION_ID
), DIM_DATE AS (
  SELECT
    DATE AS DIM_DATE,
    DATE_LY,
    WEEK_ID,
    WEEK_NUMBER,
    QUARTER_ID,
    QUARTER_NAME
  FROM TR_PRD_ECOM_DB.ANALYSIS.DIM_DATE AS d
)
SELECT
  DIM_DATE,
  TDATE,
  DATE_LY,
  WEEK_ID,
  WEEK_NUMBER,
  QUARTER_ID,
  QUARTER_NAME,
  TRANSACTION_ID,
  SFCC_CUSTOMER_ID,
  CUSTOMER_ID,
  TRANSACTION_DATE,
  FIRST_TRANSACTION_DATE,
  LATEST_TRANSACTION_DATE,
  CUSTOMER_TYPE,
  ORDER_CHANNEL,
  ORDER_CHANNEL_AGG,
  sum(ORDER_NET_TOTAL) as ORDER_NET_TOTAL,
  Sum(ORDER_TOTAL_TAX) AS ORDER_TOTAL_TAX,
  sum(ORDER_ITEM_QTY) as ORDER_ITEM_QTY,
  IS_LOYALTY_MEMBER,
  IS_LOYALTY_TRANSACTION,
  LOYALTY_OPTIN_STORE_NO,
  LOYALTY_OPTIN_DT,
  LOYALTY_OPTOUT_DT,
  LOYALTY_NET_TOTAL,
  LOYALTY_TIER,
  LOYALTY_REDEMPTION_FLAG,
  REDEMPTION_NET_TOTAL,
  REDEMPTION_TRANSACTION_ID
FROM f_orders_combined
LEFT JOIN DIM_DATE
  ON DIM_DATE = TO_DATE(f_orders_combined.TRANSACTION_DATE)